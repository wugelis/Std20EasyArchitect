<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup Label="Globals">
    <SccProjectName></SccProjectName>
    <SccProvider></SccProvider>
    <SccAuxPath></SccAuxPath>
    <SccLocalPath></SccLocalPath>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Description>這是課程『使用 .NET Standard 開發跨平台應用程式』所使用的範例套件

詳細課程內容說明：
Agenda
什麼是 .NET Standard？
.NET Standard 與 .NET Core 的曖昧關係
.NET today—reusing code
.NET tomorrow—reusing code
What’s new in .NET Standard 2.0?
Demo: Looking at .NET Standard
Demo: Multi-Targeting with .NET Standard
Demo: .NET Standard 包裝 - 跨平台應用程式

課程說明：
微軟近期所推出的 .NET Standard ，而沒多久又將 .NET Standard 推向 2.0 版，再加上 .NET Core 與 ASP.NET Core 2.1 的相繼推出、以及改變應用程式佈署模式的容器服務微軟更是讓 Docker 與 Windows Server 2016 無縫的整合，對於許多工具像是 Visual Studio／VSCode／Visual Studio for MAC 與開發平台不斷地釋出、更新，不管是開發相關、或者持續交付（VSTS）、Containers，這些布局都說明了微軟的熊熊野心。

本場次，我將帶著各位 使用 .NET Standard 2.0 看看它可以為我們在開發這條路上增加什麼樣的秘密武器呢？</Description>
    <Copyright>Gelis</Copyright>
    <Version>1.0.0.2</Version>
    <AssemblyVersion>1.0.0.2</AssemblyVersion>
    <FileVersion>1.0.0.2</FileVersion>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Http.Abstractions" Version="2.1.1" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.1" />
  </ItemGroup>

  <ItemGroup>
    <Reference Include="Microsoft.AspNetCore.Mvc.Core">
      <HintPath>C:\Program Files\dotnet\sdk\NuGetFallbackFolder\microsoft.aspnetcore.mvc.core\2.1.1\lib\netstandard2.0\Microsoft.AspNetCore.Mvc.Core.dll</HintPath>
    </Reference>
  </ItemGroup>

</Project>
